{"version":3,"sources":["components/LoadingComponent.js","shared/baseUrl.js","components/MenuComponent.js","components/HomeComponent.js","components/DishdetailComponent.js","components/HeaderComponent.js","components/FooterComponent.js","components/ContactComponent.js","components/AboutComponent.js","redux/ActionTypes.js","redux/ActionCreators.js","components/MainComponent.js","redux/dishes.js","redux/comments.js","redux/promotions.js","redux/leaders.js","redux/forms.js","App.js","redux/configureStore.js","index.js"],"names":["Loading","className","baseUrl","RenderMenuItem","dish","onClick","Card","to","id","CardImg","width","src","image","alt","name","CardImgOverlay","CardTitle","heading","Menu","props","menu","dishes","map","isLoading","errMess","Breadcrumb","BreadcrumbItem","active","RenderCard","item","in","transformProps","exitTransform","CardBody","designation","CardSubtitle","CardText","description","Home","dishesLoading","dishErrMess","promotion","promoLoading","promoErrMess","leader","leaderLoading","leaderErrMess","required","val","length","maxLength","len","RenderDish","top","RenderComments","comments","postComment","dishId","comment","author","Intl","DateTimeFormat","year","month","day","format","Date","parse","date","CommentForm","state","isModalOpen","toggleModal","bind","handleSubmit","this","setState","values","rating","Button","outline","Modal","isOpen","toggle","ModalHeader","ModalBody","onSubmit","Row","Label","htmlFor","md","Col","size","select","model","text","placeholder","validators","minLength","show","messages","textarea","rows","type","value","color","Component","DishDetail","Header","isNavOpen","toggleNav","handleLogin","event","alert","username","password","remember","checked","preventDefault","Fragment","Navbar","dark","expand","NavbarToggler","NavbarBrand","href","height","Collapse","navbar","Nav","NavItem","Jumbotron","Form","FormGroup","Input","innerRef","input","check","Footer","isNumber","isNaN","Number","validEmail","test","Contact","resetFeedbackForm","postFeedback","firstname","lastname","telnum","email","agree","contactType","message","role","offset","checkbox","RenderLeader","leaders","Media","tag","left","middle","object","body","About","CardHeader","title","list","ADD_COMMENT","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","ADD_COMMENTS","COMMENTS_FAILED","PROMOS_LOADING","ADD_PROMOS","PROMOS_FAILED","LEADERS_LOADING","ADD_LEADERS","LEADERS_FAILED","dispatch","newComment","toISOString","fetch","method","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","ActionTypes","payload","addComment","catch","console","log","dishesFailed","errmess","addDishes","commentsFailed","addComments","promosLoading","promosFailed","addPromos","promos","leadersLoading","leadersFailed","addLeaders","Main","fetchDishes","fetchComments","fetchPromos","fetchLeaders","classNames","timeout","location","path","component","filter","featured","promotions","promo","exact","match","parseInt","params","commentsErrMess","key","withRouter","connect","dishID","actions","reset","newFeedback","Dishes","action","Comments","concat","Promotions","Leaders","InitialFeedback","store","createStore","combineReducers","createForms","feedback","applyMiddleware","thunk","logger","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c205396.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Loading = () => {\r\n    return(\r\n        <div className=\"col-12\">\r\n            {/* spinner for loading */}\r\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\r\n            <p>Loading . . .</p>\r\n        </div>\r\n    );\r\n};","export const baseUrl = 'http://localhost:3001/';\r\n","import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n// converting the class component to functional component\r\nfunction RenderMenuItem({ dish, onClick }) {\r\n    return (\r\n        // relacing Media with cards\r\n        // here main component is passing a onclick as a props to this Menu component\r\n        // then dish.id will be passed back to main and stored in selected dish\r\n        <Card>\r\n            {/* `` js code inside this, when it is passed, it is evaluated */}\r\n            {/* so dish.id will be substituted with its id */}\r\n            <Link to={`/menu/${dish.id}`}>\r\n                {/* display the image */}\r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                {/* displaying the name of the dishes on the image card itself */}\r\n                <CardImgOverlay>\r\n                    {/* heading for dish */}\r\n                    <CardTitle heading><h4>{dish.name}</h4></CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst Menu = (props) => {\r\n    // this will be displayed on UI    \r\n    // map will iterate over items over array\r\n    // map them into list of items here\r\n    // now receiving dishes details from props\r\n    const menu = props.dishes.dishes.map((dish) => {\r\n        return (\r\n            // here we will create the view for each of the item dishes\r\n            // in js every item requires a key attribute to be specified\r\n            // this will help the identify the item uniquely\r\n            <div key={dish.id} className=\"col-12 col-md-5 mt-1\">\r\n                <RenderMenuItem dish={dish} />\r\n            </div>\r\n        );\r\n    });\r\n    if (props.dishes.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.dishes.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h4>{props.dishes.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/home'>Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {/* js variables */}\r\n                    {menu}\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n// exporting the component, so that it can be used by other modules\r\nexport default Menu;","import React from 'react';\r\nimport { Loading } from './LoadingComponent';\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle\r\n} from 'reactstrap';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform } from 'react-animation-components';\r\n\r\nfunction RenderCard({ item, isLoading, errMess }) {\r\n    if (isLoading) {\r\n        return (\r\n            <Loading />\r\n        );\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <h4>{errMess}</h4>\r\n        );\r\n    }\r\n    else\r\n        return (\r\n            <FadeTransform in transformProps={{\r\n                exitTransform: 'scake(0.5) translateY(-50%)'\r\n            }}>\r\n                <Card>\r\n                    <CardImg src={baseUrl + item.image} alt={item.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{item.name}</CardTitle>\r\n                        {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null}\r\n                        <CardText>{item.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </FadeTransform>\r\n        );\r\n}\r\n\r\nfunction Home(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row align-items-start\">\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.dish} isLoading={props.dishesLoading} errMess={props.dishErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.promotion} isLoading={props.promoLoading} errMess={props.promoErrMess} />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard item={props.leader} isLoading={props.leaderLoading} errMess={props.leaderErrMess} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\nimport {\r\n    Modal, ModalHeader, ModalBody, Button, Row,\r\n    Col, Label, Breadcrumb, BreadcrumbItem, Card,\r\n    CardImg, CardText, CardBody, CardTitle\r\n} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from \"react-animation-components\";\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nfunction RenderDish({ dish }) {\r\n    if (dish != null) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 mt-1\">\r\n                <FadeTransform in transformProps={{\r\n                    exitTransform: 'scake(0.5) translateY(-50%)'\r\n                }}>\r\n                    <Card>\r\n                        {/* this will add one more card that will have the selected image and title */}\r\n                        <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n                        < CardBody >\r\n                            <CardTitle><h4>{dish.name}</h4></CardTitle>\r\n                            <CardText>{dish.description}</CardText>\r\n                        </CardBody >\r\n                    </Card>\r\n                </FadeTransform>\r\n            </div >\r\n        );\r\n    }\r\n    else {\r\n        return <div></div>;\r\n    }\r\n}\r\n\r\nfunction RenderComments({ comments, postComment, dishId }) {\r\n    if (comments != null) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    <Stagger in>\r\n                        {comments.map((comment) => {\r\n                            return (\r\n                                <Fade in>\r\n                                    <li key={comment.id}>\r\n                                        <p>{comment.comment}</p>\r\n                                        <p>\r\n                                            -- {comment.author} , {new Intl.DateTimeFormat(\"en-US\", { year: \"numeric\", month: \"short\", day: \"2-digit\" }).format(new Date(Date.parse(comment.date)))}\r\n                                        </p>\r\n                                    </li>\r\n                                </Fade>\r\n                            );\r\n                        })}\r\n                    </Stagger>\r\n                </ul>\r\n                <CommentForm dishId={dishId} postComment={postComment} />\r\n            </div>\r\n        );\r\n    } else return <div></div>;\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n        if (props.dish != null) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to='/menu'>Menu</Link>\r\n                            </BreadcrumbItem>\r\n                            <BreadcrumbItem active>\r\n                                {props.dish.name}\r\n                            </BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>{props.dish.name}</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RenderDish dish={props.dish} />\r\n                        {/* dishId={props.dish.id} id ispassed to \r\n                        know about which which dish is going to be rendered */}\r\n                        <RenderComments comments={props.comments}\r\n                            postComment={props.postComment}\r\n                            dishId={props.dish.id}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else return <div></div>;\r\n}\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        // console.log(\"Current State is: \" + JSON.stringify(values));\r\n        // alert(\"Current State is: \" + JSON.stringify(values));\r\n\r\n        // when submitted this comment will be added to the list of comments\r\n\r\n        // when you submit the comment, you'll see that the submission of the \r\n        // comment will trigger action to be sent to your redux store, and then \r\n        // this action will result in the comment being added into the comments \r\n        // part of the state of your redux store, and then when the changes, then\r\n        // that will result in the store emitting a change, and that will result \r\n        // in your main component going and getting the updated state from the redux \r\n        // store, and then the main component passes the new state to all the chilled \r\n        // components, and then when you come down the RenderComments component realizes \r\n        // that the comments part has changed, so it will have to be rendered. So, react\r\n        //  takes care of re rendering that with new the comment added into the list there.\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil\" /> Submit Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={this.handleSubmit}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12}>\r\n                                    Rating\r\n                                </Label>\r\n                                <Col md={{ size: 12 }}>\r\n                                    <Control.select\r\n                                        model=\".rating\"\r\n                                        name=\"rating\"\r\n                                        className=\"form-control\"\r\n                                    >\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" md={12}>\r\n                                    Your Name\r\n                                </Label>\r\n                                <Col md={12}>\r\n                                    <Control.text\r\n                                        model=\".author\"\r\n                                        id=\"author\"\r\n                                        name=\"author\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required,\r\n                                            minLength: minLength(3),\r\n                                            maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: \"Required\",\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 characters or less\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}>\r\n                                    Comment\r\n                                </Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea\r\n                                        model=\".comment\"\r\n                                        id=\"comment\"\r\n                                        name=\"comment\"\r\n                                        rows={5}\r\n                                        className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                                Submit\r\n                            </Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default DishDetail;","import React, { Component } from 'react';\r\nimport {\r\n    Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\r\n    Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label\r\n} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        }\r\n\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    // in order to use this code in jsx we have to bind this in your code \r\n    // we can still use this function by arrow function in props\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        return (\r\n            // this enables us to group together the element and return it\r\n            // also ensures the altenative div is used to add react elements\r\n            // if we use div this will add one more node into our DOM \r\n            // by react.fragment we don't add one more node to the DOM\r\n            <React.Fragment>\r\n                {/* add navbar */}\r\n                {/* expand for md and lg */}\r\n                < Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        {/* button to toppge the navbar on and off */}\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        {/* Brand name added */}\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                            <img src=\"assets/images/logo.png\" height=\"30\" width=\"41\" alt=\"Ristorante Con Fusion\"></img>\r\n                        </NavbarBrand>\r\n                        {/* to collapse the navbar for sm screen */}\r\n                        {/* isOpen a boolean value, to know when to show and hide the navbar */}\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    {/* nav-link style the link to fit into the navbar */}\r\n                                    <NavLink className=\"nav-link\" to=\"/home\">\r\n                                        {/* home icon */}\r\n                                        <span className=\"fa fa-home fa-lg\"></span> Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    {/* nav-link style the link to fit into the navbar */}\r\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                        {/* home icon */}\r\n                                        <span className=\"fa fa-info fa-lg\"></span> About Us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    {/* nav-link style the link to fit into the navbar */}\r\n                                    <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                        {/* home icon */}\r\n                                        <span className=\"fa fa-list fa-lg\"></span> Menu\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    {/* nav-link style the link to fit into the navbar */}\r\n                                    <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                        {/* home icon */}\r\n                                        <span className=\"fa fa-address-card fa-lg\"></span> Contact Us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            {/* button for toggle modal */}\r\n                            {/* ml-auto is not working here */}\r\n                            {/* justify-content-end not working here */}\r\n                            {/* this will place the  */}\r\n                            <Nav className=\"col-12 col-md offset-md-3 col-lg offset-lg-7\" >\r\n                                <NavItem>\r\n                                    <Button outline onClick={this.toggleModal}>\r\n                                        <span className=\"fa fa-sign-in fa-lg\"></span> Login\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar >\r\n                <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>Ristorante Con Fusion</h1>\r\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our\r\n                                    lipsmacking creations will tickle your culinary senses!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                {/* innerRef for retreiving the input values */}\r\n                                <Input type=\"text\" id=\"username\" name=\"username\"\r\n                                    innerRef={(input) => this.username = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\"\r\n                                    innerRef={(input) => this.password = input} />\r\n                            </FormGroup>\r\n                            {/* check for checkbox */}\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\"\r\n                                        innerRef={(input) => this.remember = input} />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4 offset-1 col-sm-2\">\r\n                        <h5>Links</h5>\r\n                        <ul className=\"list-unstyled\">\r\n                            <li><Link to='/home'>Home</Link></li>\r\n                            <li><Link to='/aboutus'>About Us</Link></li>\r\n                            <li><Link to='/menu'>Menu</Link></li>\r\n                            <li><Link to='/contactus'>Contact Us</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-7 col-sm-5\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone fa-lg\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax fa-lg\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope fa-lg\"></i>: <a href=\"mailto:confusion@food.net\">\r\n                                confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 align-self-center\">\r\n                        <div className=\"text-center\">\r\n                            <a className=\"btn btn-social-icon btn-google\" href=\"http://google.com/+\"><i className=\"fa fa-google-plus\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\"></i></a>\r\n                            <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-auto\">\r\n                        <p>© Copyright 2018 Ristorante Con Fusion</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Control, Form, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        // console.log('Current State is: ' + JSON.stringify(values));\r\n        // alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n        this.props.postFeedback(\r\n            values.firstname,\r\n            values.lastname,\r\n            values.telnum,\r\n            values.email,\r\n            values.agree,\r\n            values.contactType,\r\n            values.message\r\n          );\r\n        // event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/home'>Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>\r\n                            Contact Us\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9 \">\r\n                        {/* values data will be passed to handle submit */}\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-gorup mt-3\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    {/* className=\"form-control\" bootstrap styling for control */}\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    {/* error messages are strored here as key value pair */}\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group  mt-3\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group mt-3\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group mt-3\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group mt-3\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                            /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group mt-3\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group mt-3\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n// import { Loading } from \"./LoadingComponent\";\r\n// import { Fade, Stagger } from \"react-animation-components\";\r\n\r\nfunction RenderLeader({ leaders }) {\r\n    if (leaders != null) {\r\n        return leaders.map((leader) => (\r\n            <div key={leader.id} className=\"col-12 mt-5\">\r\n                {/* list tag item */}\r\n                <Media tag=\"li\" className=\"list-unstyled\">\r\n                    {/* alignment */}\r\n                    <Media left middle>\r\n                        {/* display the image */}\r\n                        <Media object src={baseUrl + leader.image} alt={leader.name} />\r\n                    </Media>\r\n                    {/* body of the image */}\r\n                    <Media body>\r\n                        {/* heading for dish */}\r\n                        <Media heading>{leader.name}</Media>\r\n                        <Media className=\"mb-2\">{leader.designation}</Media>\r\n                        {/* dish description */}\r\n                        <p>{leader.description}</p>\r\n                    </Media>\r\n                </Media>\r\n            </div>\r\n        ));\r\n    }\r\n    else return <div></div>;\r\n\r\n}\r\n\r\nfunction About(props) {\r\n\r\n    const leaders = props.leaders.map((leader) => {\r\n        return (\r\n            <p>Leader {leader.name}</p>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>About Us</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <h2>Our History</h2>\r\n                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere else, it enjoys patronage from the A-list clientele in Hong Kong.  Featuring four of the best three-star Michelin chefs in the world, you never know what will arrive on your plate the next time you visit us.</p>\r\n                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in a pan.</p>\r\n                </div>\r\n                <div className=\"col-12 col-md-5\">\r\n                    <Card>\r\n                        <CardHeader className=\"bg-primary text-white\">Facts At a Glance</CardHeader>\r\n                        <CardBody>\r\n                            <dl className=\"row p-1\">\r\n                                <dt className=\"col-6\">Started</dt>\r\n                                <dd className=\"col-6\">3 Feb. 2013</dd>\r\n                                <dt className=\"col-6\">Major Stake Holder</dt>\r\n                                <dd className=\"col-6\">HK Fine Foods Inc.</dd>\r\n                                <dt className=\"col-6\">Last Year's Turnover</dt>\r\n                                <dd className=\"col-6\">$1,250,375</dd>\r\n                                <dt className=\"col-6\">Employees</dt>\r\n                                <dd className=\"col-6\">40</dd>\r\n                            </dl>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <Card>\r\n                        <CardBody className=\"bg-faded\">\r\n                            <blockquote className=\"blockquote\">\r\n                                <p className=\"mt-1\">You better cut the pizza in four pieces because\r\n                                    I'm not hungry enough to eat six.</p>\r\n                                <footer className=\"blockquote-footer\">Yogi Berra,\r\n                                    <cite title=\"Source Title\">The Wit and Wisdom of Yogi Berra,\r\n                                        P. Pepe, Diversion Books, 2014</cite>\r\n                                </footer>\r\n                            </blockquote>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h2>Corporate Leadership</h2>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <Media list>\r\n                        <RenderLeader leaders={props.leaders} />\r\n                    </Media>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","export const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const DISHES_LOADING = 'DISHES_LOADING';\r\nexport const DISHES_FAILED = 'DISHES_FAILED';\r\nexport const ADD_DISHES = 'ADD_DISHES';\r\n// The DISHES_LOADING means that the dishes are currently \r\n// being fetched, perhaps from a server. The dishes information \r\n// has been fetched from a server. The DISHES_FAILED means that \r\n// you failed to fetch the dishes information from a server, and \r\n// then ADD_DISHES means that you want to add the dishes into your store.\r\n\r\nexport const ADD_COMMENTS = 'ADD_COMMENTS';\r\nexport const COMMENTS_FAILED = 'COMMENTS_FAILED';\r\nexport const PROMOS_LOADING = 'PROMOS_LOADING';\r\nexport const ADD_PROMOS = 'ADD_PROMOS';\r\nexport const PROMOS_FAILED = 'PROMOS_FAILED';\r\nexport const LEADERS_LOADING = 'LEADERS_LOADING';\r\nexport const ADD_LEADERS = 'ADD_LEADERS';\r\nexport const LEADERS_FAILED = 'LEADERS_FAILED';","import * as ActionTypes from './ActionTypes';\r\n// the action creator to supply that information to my dishes reducer\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n// this function will create an action objects\r\nexport const addComment = (comment) => ({\r\n    // defining action type\r\n    // then send it to store\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n    return fetch(baseUrl + 'comments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'same-origin'\r\n    })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addComment(response)))\r\n        .catch(error => {\r\n            console.log('Post comments ', error.message);\r\n            alert('Your comment could not be posted\\n Error: ' + error.message);\r\n        });\r\n}\r\n\r\n// nested fucntion \r\n// this is a thunk \r\n// the fetchDishes should be used for fetching the dishes\r\n// it is going to return a function\r\nexport const fetchDishes = () => (dispatch) => {\r\n    // After a 2000-second delay, I will dispatch a \r\n    // call to another function called addDishes with the\r\n    //  dishes that I have imported here. So, those dishes \r\n    //  object will be supplied to the addDishes here. So, \r\n    //  as you can see, this Thunk is doing two dispatches. \r\n    //  First, it does the first dispatch. We'll see what \r\n    //  does dishesLoading is going to do in a short while. \r\n    //  And then, after two seconds delay, it's going to \r\n    //  dispatch the addDishes. So, this is going to push \r\n    // the dishes into the state of our store there\r\n    dispatch(dishesLoading(true));\r\n    // // short delay of 2 sec\r\n    // setTimeout(() => {\r\n    //     dispatch(addDishes(DISHES));\r\n    // }, 2000)\r\n\r\n    // fet the dishes \r\n    // then promise resolves then the data is converted inti json\r\n    // then json passes with addDishes with dispatch method\r\n    return fetch(baseUrl + 'dishes')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(dishes => dispatch(addDishes(dishes)))\r\n        .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\n// It's going to return an action of the type ActionTypes.DISHES_LOADING.\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n// this dishesFailed will take an error message as a parameter. So, this is again a function as you expect, which is going to return an action object. So, it'll return an action object of the type, ActionTypes.DISHES_FAILED, and also it will return a payload as error message. \r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n//  that the addDishes is taking all the dish information as a parameter here, so it must be creating an action of the type, dishes ADD_DISHES action type, and then it'll pass the dishes as the payload or the second part of my action object here.\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseUrl + 'comments')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(addComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    dispatch(promosLoading());\r\n    return fetch(baseUrl + 'promotions')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(promos => dispatch(addPromos(promos)))\r\n        .catch(error => dispatch(promosFailed(error.message)));\r\n};\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n    dispatch(leadersLoading());\r\n    return fetch(baseUrl + 'leaders')\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n            error => {\r\n                var errmess = new Error(error.message);\r\n                throw errmess;\r\n            })\r\n        .then(response => response.json())\r\n        .then(leaders => dispatch(addLeaders(leaders)))\r\n        .catch(error => dispatch(leadersFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});\r\n\r\nexport const postFeedback = (\r\n    firstname,\r\n    lastname,\r\n    telnum,\r\n    email,\r\n    agree,\r\n    contactType,\r\n    message\r\n) => dispatch => {\r\n    const newFeedback = {\r\n        firstname: firstname,\r\n        lastname: lastname,\r\n        telnum: telnum,\r\n        email: email,\r\n        agree: agree,\r\n        contactType: contactType,\r\n        message: message\r\n    };\r\n\r\n    return fetch(baseUrl + \"feedback\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newFeedback),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n        .then(\r\n            response => {\r\n                if (response.ok) {\r\n                    return response;\r\n                } else {\r\n                    var error = new Error(\r\n                        \"Error \" + response.status + \": \" + response.statusText\r\n                    );\r\n                    error.response = response;\r\n                    throw error;\r\n                }\r\n            },\r\n            error => {\r\n                throw error;\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(response =>\r\n            alert(\"Thank you for your feedback!\" + JSON.stringify(response))\r\n        )\r\n        .catch(error => {\r\n            console.log(\"post feedbacks\", error.message);\r\n            alert(\"Your feedback could not be posted\\nError: \" + error.message);\r\n        });\r\n};","import Menu from './MenuComponent';\r\nimport Home from './HomeComponent';\r\nimport React, { Component } from 'react';\r\nimport DishDetail from \"./DishdetailComponent\";\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postComment, fetchDishes, fetchPromos, fetchComments, fetchLeaders, postFeedback } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\n// import { Loading} from './LoadingComponent';\r\n// changing from function to class component\r\n// function App() {\r\n// main component will be the responsible for the state of application\r\n// this function will allow these compoent to main as props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n    };\r\n}\r\n\r\n// dispatch parameter is received from store\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    // these parameters are passed as parameter of addComments, then dispatch\r\n    // so here actioncreator add commment will return an action object for addign a comment\r\n    // then it is given as parameter to the dispatch function\r\n    // then we are supplying as a function, which can be used as a component here\r\n    postComment: (dishID, rating, author, comment) => dispatch(postComment(dishID, rating, author, comment)),\r\n    fetchDishes: () => { dispatch(fetchDishes()) },\r\n    // this will reset feedback form \r\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback')) },\r\n    fetchComments: () => dispatch(fetchComments()),\r\n    fetchPromos: () => dispatch(fetchPromos()),\r\n    fetchLeaders: () => dispatch(fetchLeaders()),\r\n    postFeedback: (firstname, lastname, telnum, email, agree, contactType, message) =>\r\n        dispatch(postFeedback(firstname, lastname, telnum, email, agree, contactType, message))\r\n});\r\n\r\nclass Main extends Component {\r\n    // in the main component I need to fetch the dishes. So, where do I fetch the dishes? So, this is where I can take the help of the lifecycle method of my component called as componentDidMount. Now, this lifecycle method, whatever we include in this lifecycle method component will bound will be called or will be executed just after this component gets mounted into the view of my application. So, right at the point this would be called. That is a very good time for me to fetch any data that I require for my application. \r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n        this.props.fetchComments();\r\n        this.props.fetchPromos();\r\n        this.props.fetchLeaders();\r\n    }\r\n\r\n    render() {\r\n        const HomePage = () => {\r\n            return (\r\n                // displaying only dish which are featured\r\n                // loading and errormsg parameter\r\n                <Home\r\n                    dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n                    dishesLoading={this.props.dishes.isLoading}\r\n                    dishErrMess={this.props.dishes.errMess}\r\n                    promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n                    promoLoading={this.props.promotions.isLoading}\r\n                    promoErrMess={this.props.promotions.errMess}\r\n                    leader={this.props.leaders.leaders.filter((leader) => leader.featured)[0]}\r\n                    leaderLoading={this.props.leaders.isLoading}\r\n                    leaderErrMess={this.props.leaders.errMess}\r\n                />\r\n            );\r\n        }\r\n\r\n        // method a params from route\r\n        // it consist of parameter as dishId\r\n        const DishWithId = ({ match }) => {\r\n            return (\r\n                // match.params.dishId - accessing the dishId from params\r\n                // 10 is the redix od decimal number\r\n\r\n                // passing the function as a props\r\n                <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId, 10))[0]}\r\n                    isLoading={this.props.dishes.isLoading}\r\n                    errMess={this.props.dishes.errMess}\r\n                    comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId, 10))}\r\n                    commentsErrMess={this.props.comments.errMess}\r\n                    postComment={this.props.postComment}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <TransitionGroup>\r\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\r\n                        <Switch location={this.props.location}>\r\n                            {/* here we are giving pathname and Homepage Component */}\r\n                            <Route path=\"/home\" component={HomePage} />\r\n                            {/* this Route will not allow us to pasa ny props into menu component */}\r\n                            {/* so we have to pass the props as an function component */}\r\n                            <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n                            {/* here Route returns 3 prams that we use in DishWithId */}\r\n                            <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n                            <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback} />} />\r\n                            <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders.leaders} />} />\r\n                            {/* if no path matches then redirect to home page */}\r\n                            <Redirect to=\"/home\" />\r\n                        </Switch>\r\n                        {/* using menu component from MenuComponent */}\r\n                        {/* passing the dishes details as props */}\r\n                        {/* < Menu dishes={this.state.dishes} onClick={(dishId) => this.onDishSelect(dishId)} /> */}\r\n                        {/* filter will compare from each dish and get the maching dish with dishId */}\r\n                        {/* filter will pass the result in array format */}\r\n                        {/* so just to be safe we are selecting the first dish */}\r\n                        {/* <DishDetail dish={this.state.dishes.filter((dish) => dish.id === this.state.selectedDish)[0]} /> */}\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n                <Footer />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n// connecting to redux\r\n// to make use of react router \r\n// connect should be surround by withRouter\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","import * as ActionTypes from './ActionTypes';\r\n// reducer generate new state from currennt state\r\n// defining the inital state whern the app starts\r\n\r\n// state and action as parameter\r\n// it's supposed to do something in response to receiving \r\n// these three actions. So, it's the responsibility of this \r\n// dishes reducer to interpret what these actions mean. \r\nexport const Dishes = (state = {\r\n    // Now, how do we interpret this? Initially, the isLoading \r\n    // property is true because the dishes is empty here.So, that \r\n    // means that you'll need to load the dishes' information from \r\n    // somewhere before the details of the dishes become available \r\n    // within your state.The error message, it will be set to equal \r\n    // to the error message that will be passed in when you receive \r\n    // the DISHES_FAILED action here, otherwise, it will be null.So,\r\n    // if you try to fetch the dishes from a server and the server \r\n    //  fails to deliver the dishes to you, then you will set the error \r\n    //  message to the corresponding error message that has been \r\n    //  returned to you from the server.Otherwise, if the dishes are \r\n    //  obtained correctly, then the dishes will be loaded in with the \r\n    //  information about the dishes.Now, that will be done when you \r\n    //  receive the ADD_DISHES action here.So now, you see the three \r\n    //  kinds of actions that we have seen here.DISHES_LOADING,\r\n    // DISHES_FAILED, and then ADD_DISHES.Now, what do we do in each \r\n    //  of these three cases? Initially, because we don't have the dishes \r\n    //  information, I'm going to set the isLoading to true. But then \r\n    //  the moment you call the ADD_DISHES, then isLoading should be \r\n    //  set equal to false because the dishes will be loaded in.When \r\n    //  you call the DISHES_LOADING, if it was originally false set \r\n    //  to true meaning that you're beginning to fetch new dishes. So, \r\n    //  this way, whenever you go to the server to fetch the dish \r\n    //  information from the server, you can set the isLoading to true. \r\n    //  Once you obtain the dishes information from the server, you set\r\n    //     the isLoading to false and then load in the dishes into the \r\n    //   dishes property of this part of the state.\r\n    isLoading: true,\r\n    errMess: null,\r\n    dishes: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_DISHES:\r\n            // I'm just going to take the same state and then I can add, \r\n            // and so this is the sprint operator that I'm going to load in \r\n            // here. So, it will take the current value of the state and \r\n            // then whatever else that I passing in after this will be \r\n            // applied as modifications to the state. So again, the state \r\n            // itself will not be mutated, instead, I take the state, I \r\n            // create a new object from the original state and then make \r\n            // some changes to that object and then return that object.\r\n            // the action.payload carries the dishes information. So in \r\n            // this case, I will set the dishes to action.payload.\r\n            return { ...state, isLoading: false, errMess: null, dishes: action.payload };\r\n\r\n        case ActionTypes.DISHES_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, dishes: [] }\r\n\r\n        case ActionTypes.DISHES_FAILED:\r\n            // as you realize the dishes failed to load, then the payload in that call, \r\n            // and the action.payload will contain the error message. So in that case, \r\n            // I'm going to return the original state, the sprint operator. I will set \r\n            // the isLoading to false because I have already failed to load the dishes, \r\n            // so I need to set up the error message. So, the error message will be equal \r\n            // to action.payload.\r\n            return { ...state, isLoading: false, errMess: action.payload, dishes: [] };\r\n\r\n        // if not mofified then by default return dishes as it is\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from './ActionTypes';\r\n\r\n// reducer generate new state from currennt state\r\n// defining the inital state whern the app starts\r\n// state and action as parameter\r\nexport const Comments = (state = { errMess: null, comments: [] }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_COMMENTS:\r\n            return { ...state, errMess: null, comments: action.payload };\r\n\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return { ...state, errMess: action.payload };\r\n\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payload;\r\n            // pushes in new array and a new object is created\r\n            return { ...state, comments: state.comments.concat(comment) };\r\n        // if not mofified then by default return dishes as it is\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as ActionTypes from './ActionTypes';\r\n// reducer generate new state from currennt state\r\n// defining the inital state whern the app starts\r\n// state and action as parameter\r\nexport const Promotions = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    promotions: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_PROMOS:\r\n            return { ...state, isLoading: false, errMess: null, promotions: action.payload };\r\n\r\n        case ActionTypes.PROMOS_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, promotions: [] };\r\n\r\n        case ActionTypes.PROMOS_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload };\r\n        // if not mofified then by default return dishes as it is\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as ActionTypes from './ActionTypes';\r\n// reducer generate new state from currennt state\r\n// defining the inital state whern the app starts\r\n\r\n// state and action as parameter\r\nexport const Leaders = (state = {\r\n    isLoading: true,\r\n    errMess: null,\r\n    leaders: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_LEADERS:\r\n            return { ...state, isLoading: false, errMess: null, leaders: action.payload };\r\n\r\n        case ActionTypes.LEADERS_LOADING:\r\n            return { ...state, isLoading: true, errMess: null, leaders: [] };\r\n\r\n        case ActionTypes.LEADERS_FAILED:\r\n            return { ...state, isLoading: false, errMess: action.payload, leaders: [] };\r\n        // if not mofified then by default return dishes as it is\r\n        // if not mofified then by default return dishes as it is\r\n        default:\r\n            return state;\r\n    }\r\n}","export const InitialFeedback = {\r\n    firstname: '',\r\n    lastname: '',\r\n    telnum: '',\r\n    email: '',\r\n    agree: false,\r\n    contactType: 'Tel.',\r\n    message: ''\r\n};","import './App.css';\nimport Main from './components/MainComponent';\nimport React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\n// changing from function to class component\n// function App() {\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n\n  render() {\n    return (\n      // by wrapping this wilth provide and passing store as pros\n      // store will become available to all the component\n      <Provider store={store}>\n        {/* // this will make use of react router */}\n        <BrowserRouter>\n          <div>\n            <Main />\n          </div >\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Dishes } from './dishes';\r\nimport { Comments } from './comments';\r\nimport { Promotions } from './promotions';\r\nimport { Leaders } from './leaders';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { createForms } from 'react-redux-form';\r\nimport { InitialFeedback } from './forms';\r\n\r\nexport const ConfigureStore = () => {\r\n    // creating store with Reducer and initialState like dishes etc\r\n    const store = createStore(\r\n        // mapping the reducer objects\r\n        combineReducers({\r\n            dishes: Dishes,\r\n            comments: Comments,\r\n            promotions: Promotions,\r\n            leaders: Leaders,\r\n            // this will add necessary reducer functions and state info into createStore\r\n            ...createForms({\r\n                feedback: InitialFeedback\r\n            })\r\n        }),\r\n        // both of these are being supplied into our \r\n        // store as enhancers for our store. And once \r\n        // we do that, then both the Thunk and the \r\n        // Logger become available within our application\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n\r\n    return store;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\n\n// this will render app and attach it to the the root element\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}